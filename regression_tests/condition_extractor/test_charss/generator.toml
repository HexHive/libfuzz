[analysis]
apis_llvm = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/apis_llvm.json"
apis_clang = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/apis_clang.json"
coercemap = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/coerce.log"
headers = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/exported_functions.txt"
incomplete_types = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/incomplete_types.txt"
conditions = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/library.json"
# minimum_apis = ""
minimum_apis = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/minimize_api.txt"
data_layout = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/datalayout.txt"
enum_types = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/enum_types.txt"


[generator]
workdir = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/workdir/"
policy = "constraint_based"
dep_graph = "type"
# dep_graph = "undef"
pool_size = 1
driver_size = 10
num_seeds = 1
backend = "libfuzz"

[backend]
headers =  "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/"
public_headers = "/workspaces/libfuzz/regression_tests/condition_extractor/test_charss/public_headers.txt"
